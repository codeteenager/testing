import{_ as l,o as i,c as a,Q as e}from"./chunks/framework.744b52c6.js";const m=JSON.parse('{"title":"前端测试基础概念","description":"","frontmatter":{},"headers":[],"relativePath":"guide/index.md","filePath":"guide/index.md","lastUpdated":1698744418000}'),t={name:"guide/index.md"},p=e('<h1 id="前端测试基础概念" tabindex="-1">前端测试基础概念 <a class="header-anchor" href="#前端测试基础概念" aria-label="Permalink to &quot;前端测试基础概念&quot;">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>对于稍微有一些开发经验的同学在开发过程中总会经历下面类似的问题。</p><ul><li>每次在版本发布上线之前，在电脑前蹲上好几个小时甚至是更长时间对你的应用进行测试，这个过程非常枯燥而痛苦</li><li>当代码的复杂度达到了一定的级别，当维护者的数量不止你一个，你应该会逐渐察觉到你在开发新功能或修复bug的时候，会变得越发小心翼翼，即使代码看起来没什么问题，但你心里还是会犯嘀咕：这个Feature会不会带来其他Bug？这个Fix会不会引入其他&quot;Feature&quot;？</li><li>当你想要对项目中的代码进行重构的时候，你会花费大量的时间进行回归测试</li></ul><p>以上这些问题都是由于大多数开发者所使用最基本的手动测试的方式所带来的问题，解决它的根本原因就在于引入自动化测试方案。</p><p>什么是应用程序测试？</p><p>一个简单的定义是：应用程序测试是指检查程序运行过程是否正确。</p><p>在日常的开发中，代码的完工其实并不等于开发的完工。如果没有测试，不能保证代码能够正常运行。</p><p>如何进行应用程序测试？</p><ul><li>手动测试：通过测试人员与应用程序的交互来检查是否正常工作。</li><li>自动化测试：编写应用程序来替代人工检验。</li></ul><h2 id="手动测试" tabindex="-1">手动测试 <a class="header-anchor" href="#手动测试" aria-label="Permalink to &quot;手动测试&quot;">​</a></h2><p>每一个称职的开发人员都懂得手动测试代码。在编写完源代码之后，下一步理所当然就是去手动测试它。</p><p>手动测试的优势在于足够简单灵活，但是缺点也很明显：</p><ul><li>手动不适合大型项目</li><li>忘记测试某项功能</li><li>大部分时间都在做回归测试</li></ul><p>虽然有一部分手动测试时间是花在测试新特性上，但是大部分时间还是用来检查之前的特性是否仍正常工作。这种测试被称为回归测试。回归测试对人类来说是非常困难的任务-----它们是重复性的，要求投入更多注意力，而且没有创造性的输入。总之，这种测试太枯燥了。幸运的是，计算机特别擅长此类工作，这也是自动化测试可以大展身手的地方！</p><h2 id="自动化测试" tabindex="-1">自动化测试 <a class="header-anchor" href="#自动化测试" aria-label="Permalink to &quot;自动化测试&quot;">​</a></h2><p>自动化测试（automated testing）是利用计算机程序检查软件是否运行正常的测试方法。换句话说，就是用其他额外的代码检查被测软件的代码。当测试代码编写完之后，就可以不费吹灰之力的进行无数次重复测试。</p><p>可使用许多种不同的方法来编写自动化测试脚本。</p><ul><li>可以编写浏览器自动执行的程序</li><li>可以直接调用源代码里的函数</li><li>也可以直接对比程序渲染之后的截图</li></ul><p>虽然每一种方法的优势各不相同，但它们有一大共同点：相比手动测试而言节省了大量时间以及提高了程序的稳定性。</p><p>当然不仅如此，自动化测试还有很多优点，比如：</p><ul><li>今早的发现程序的bug和不足</li><li>增强程序员对程序健壮性，稳定性的信心</li><li>改进设计</li><li>快速反馈，减少调试时间</li><li>促进重构</li></ul><p>当然了自动化测试不可能保证一个程序是完全正确的，而且事实上，在实际开发过程中，编写自动化测试代码通常是开发人员不太喜欢的一个环节。大多数情况下，前端开发人员在开发完一项功能后，只是打开浏览器手动点击，查看效果是否正确，之后就很少对该块代码进行管理。造成这个情况的原因主要有两个：</p><ul><li>一个是业务繁忙，没有时间进行测试的编写</li><li>另一个是不知道如何编写测试</li></ul><p>但这些问题不应该作为我们掌握前端自动化测试的绊脚石，而且一旦掌握了前端自动化测试方案无论是对应对大型项目的开发还是升职加薪都是有益的。</p><p>所以：</p><ul><li>如何进行前端应用测试？</li><li>应用程序中哪些部分应该被优先测试？</li><li>这些部分应该使用什么方法进行测试？</li><li>一些特殊场景下的测试问题该怎么解决？</li><li>我们如何从一开始就整合不同的测试技巧，编制一个高效的测试套件？</li></ul>',27),o=[p];function r(u,d,n,s,c,_){return i(),a("div",null,o)}const f=l(t,[["render",r]]);export{m as __pageData,f as default};

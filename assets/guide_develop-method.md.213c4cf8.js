import{_ as l,o as i,c as e,Q as a}from"./chunks/framework.29d073da.js";const h=JSON.parse('{"title":"测试开发方式","description":"","frontmatter":{},"headers":[],"relativePath":"guide/develop-method.md","filePath":"guide/develop-method.md","lastUpdated":1698939922000}'),t={name:"guide/develop-method.md"},d=a('<h1 id="测试开发方式" tabindex="-1">测试开发方式 <a class="header-anchor" href="#测试开发方式" aria-label="Permalink to &quot;测试开发方式&quot;">​</a></h1><p>测试不仅能够验证软件功能、保证代码质量，也能够影响软件开发的模式。</p><p>测试开发有两个流派：</p><ul><li>TDD：测试驱动开发，先写测试后实现功能</li><li>BDD：行为驱动开发，先实现功能后写测试</li></ul><h2 id="tdd" tabindex="-1">TDD <a class="header-anchor" href="#tdd" aria-label="Permalink to &quot;TDD&quot;">​</a></h2><p>TDD（Test-driven development），测试驱动开发，是敏捷开发中的一项核心实践和技术，也是一种软件设计方法论。</p><ul><li>它的原理就是在编写代码之前先编写测试用例，由测试来决定我们的代码。</li><li>而且TDD更多的需要编写独立的测试用例，比如只测试一个组件的某个功能点，某个工具函数等。</li></ul><p>TDD开发流程：</p><ul><li>编写测试用例</li><li>运行测试</li><li>编写代码使测试通过</li><li>重构/优化代码</li><li>新增功能，重复上述步骤</li></ul><h3 id="tdd的原则" tabindex="-1">TDD的原则 <a class="header-anchor" href="#tdd的原则" aria-label="Permalink to &quot;TDD的原则&quot;">​</a></h3><ul><li>独立测试：不同代码的测试应该相互独立，一个类对应一个测试类（对于C代码或C++全局函数，则一个文件对应一个测试文件），一个函数对应一个测试函数。用例也应各自独立，每个用例不能使用其他用例的结果数据，结果也不能依赖于用例执行顺序。一个角色：开发过程包含多种工作，如：编写测试代码、编写产品代码、代码重构等。做不同的工作时，应专注于当前的角色，不要过多考虑其他方面的细节。</li><li>测试列表：代码的功能点可能很多，并且需求可能是陆续出现的，任何阶段想添加功能时，应把相关功能点加到测试列表中，然后才能继续手头工作，避免疏漏。</li><li>测试驱动：即利用测试来驱动开发，是TDD的核心。要实现某个功能，要编写某个类或某个函数，应首先编写测试代码，明确这个类、这个函数如何使用，如何测试，然后在对其进行设计、编码。</li><li>先写断言：编写测试代码时，应该首先编写判断代码功能的断言语句，然后编写必要的辅助语句。</li><li>可测试性：产品代码设计、开发时的应尽可能提高可测试性。每个代码单元的功能应该比较单纯，“各家自扫门前雪”，每个类、每个函数应该只做它该做的事，不要弄成大杂烩。尤其是增加新功能时，不要为了图一时之便，随便在原有代码中添加功能，对于C++编程，应多考虑使用子类、集成、重载等OO方法。</li><li>及时重构：对结构不合理，重复等“味道”不好的代码，在测试通过后，应及时进行重构。</li><li>小步前进：软件开发是复杂性非常高的工作，小步前进是降低复杂性的好办法。</li></ul><p>TDD的优点：</p><ul><li>保证代码质量，因为先编写测试，所以可能出现的问题都被提前发现了</li><li>促进开发人员思考，有利于程序的模块设计</li><li>测试覆盖率高，因为后编写代码，因此测试用例基本都能照顾到</li></ul><p>TDD的缺点：</p><ul><li>代码量增加，大多数情况下测试代码是功能代码的两倍甚至更多</li><li>业务耦合度高，测试用例中使用了业务中一些模拟的数据，当业务代码变更的时候，要去重新组织测试用例</li><li>关注点过于独立，由于单元测试只关注这一个单元的健康状况，无法保证多个单元组成的整体是否正常</li></ul><p>个人理解在前端应用实际开发过程中TDD更适合开发纯函数库、比如Lodash、Vue、React等。</p>',16),o=[d];function r(p,s,n,D,u,_){return i(),e("div",null,o)}const T=l(t,[["render",r]]);export{h as __pageData,T as default};
